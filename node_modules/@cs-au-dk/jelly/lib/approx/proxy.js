"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeModuleProxy = exports.stdlibProxy = exports.isProxy = exports.makeBaseProxy = exports.theArgumentsProxy = exports.theProxy = void 0;
const handler = {
    get(target, p, receiver) {
        switch (p) {
            case "length":
                if (receiver === exports.theArgumentsProxy)
                    return 10;
                else
                    return 1;
            case Symbol.toPrimitive:
                return function (hint) {
                    switch (hint) {
                        case "number":
                            return 0;
                        case "string":
                            return "";
                        case "default":
                            return "0";
                    }
                };
            case Symbol.iterator:
                return function () {
                    let index = 0;
                    return {
                        next: () => {
                            if (index++ < 3)
                                return { value: exports.theProxy, done: false };
                            else
                                return { value: undefined, done: true };
                        }
                    };
                };
            default:
                const desc = Object.getOwnPropertyDescriptor(target, p);
                if (desc && !desc.configurable && !desc.writable)
                    return target[p];
                return exports.theProxy;
        }
    },
    set() {
        return false;
    },
    has() {
        return true;
    },
    apply() {
        return exports.theProxy;
    },
    construct() {
        return exports.theProxy;
    },
    defineProperty() {
        return false;
    },
    deleteProperty() {
        return true;
    },
    getOwnPropertyDescriptor(target, property) {
        if (property === "prototype")
            return Object.getOwnPropertyDescriptor(target, property);
        return {
            configurable: true,
            enumerable: true,
            value: exports.theProxy,
            writable: true
        };
    },
    isExtensible() {
        return true;
    },
    setPrototypeOf() {
        return false;
    }
};
exports.theProxy = new Proxy(function theProxy() { }, handler);
exports.theArgumentsProxy = new Proxy([], handler);
function makeBaseProxy(target) {
    if (!target || !(typeof target === "object" || typeof target === "function"))
        return exports.theProxy;
    return new Proxy(target, {
        get(target, prop, receiver) {
            if (prop in target)
                return Reflect.get(target, prop, receiver);
            else {
                const desc = Object.getOwnPropertyDescriptor(target, prop);
                if (desc && !desc.configurable && !desc.writable)
                    return target[prop];
                return exports.theProxy;
            }
        },
        has(_target, _prop) {
            return true;
        }
    });
}
exports.makeBaseProxy = makeBaseProxy;
function isProxy(x) {
    return x === exports.theProxy || x === exports.theArgumentsProxy;
}
exports.isProxy = isProxy;
function stdlibProxy(obj) {
    return new Proxy(obj, {
        get: function (target, prop) {
            const desc = Object.getOwnPropertyDescriptor(target, prop);
            if (desc && !desc.configurable && !desc.writable)
                return target[prop];
            if (typeof desc?.value === "function")
                return exports.theProxy;
            return desc?.value;
        }
    });
}
exports.stdlibProxy = stdlibProxy;
function makeModuleProxy(target) {
    return new Proxy(target, {
        get(target, prop, _receiver) {
            return prop === "constructor" ? exports.theProxy : target[prop];
        }
    });
}
exports.makeModuleProxy = makeModuleProxy;
//# sourceMappingURL=proxy.js.map