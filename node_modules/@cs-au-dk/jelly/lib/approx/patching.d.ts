import { ConstraintVar } from "../analysis/constraintvars";
import { Token } from "../analysis/tokens";
import Solver from "../analysis/solver";
import { Node } from "@babel/types";
import { Hints } from "./hints";
export declare const APPROX_READ = true;
export declare const APPROX_WRITE = true;
export declare const APPROX_ONLY_EMPTY = false;
export declare const APPROX_DEVEL = false;
export declare class Patching {
    readonly hints: Hints;
    private readonly allocToToken;
    private dynamicReads;
    private usedHints;
    constructor(hints: Hints);
    registerAllocationSite(t: Token): void;
    recordDynamicRead(node: Node, dstVar: ConstraintVar | undefined): void;
    getRequireHints(mod: string | undefined, loc: string): Array<string> | undefined;
    patch(solver: Solver): void;
    printDiagnostics(solver: Solver): void;
}
