"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.patchGlobalBuiltins = exports.WHITELISTED = void 0;
const module_1 = __importDefault(require("module"));
const proxy_1 = require("./proxy");
const transform_1 = require("./transform");
exports.WHITELISTED = new Set([
    "events", "buffer", "assert", "assert/strict", "constants", "crypto", "module",
    "zlib", "string_decoder", "util", "util/types", "path", "url", "tty", "sys"
]);
function patchGlobalBuiltins() {
    const emptyFunction = function () { };
    const invokeCallbackWithArgs = function (cb, ...args) { cb(...args); };
    const invokeCallbackWithArgs2 = function (cb, _c, ...args) { cb(...args); };
    const g = globalThis;
    g.clearImmediate = g.clearInterval = g.clearTimeout = g.fetch = emptyFunction;
    g.setImmediate = g.queueMicrotask = invokeCallbackWithArgs;
    g.setInterval = g.setTimeout = invokeCallbackWithArgs2;
    const p = process;
    p.on = p.send = p.chdir = p.exit = p.reallyExit = p.abort = p.dlopen = p.kill = p.openStdin = proxy_1.theProxy;
    p.nextTick = invokeCallbackWithArgs;
    for (const prop of ["stdin", "stdout", "stderr"])
        Object.defineProperty(p, prop, { value: proxy_1.theProxy });
    const c = console;
    c.log = c.clear = c.dir = c.error = c.table = c.timeEnd = c.trace = emptyFunction;
    c._stdout = c._stderr = proxy_1.theProxy;
    Error.captureStackTrace = emptyFunction;
    Atomics.wait = Atomics.waitAsync = proxy_1.theProxy;
    module_1.default.register = function () { };
    g.describe = g.it = g.before = g.beforeAll = g.beforeEach = g.after = g.afterAll = g.afterEach = g.test = g.define = emptyFunction;
    g.describe.skip = emptyFunction;
    g.expect = proxy_1.theProxy;
    g.window = g.document = proxy_1.theProxy;
    for (const x of [
        Array, ArrayBuffer, BigInt, Boolean, DataView, Date, AggregateError, EvalError, RangeError, ReferenceError,
        SyntaxError, TypeError, URIError, Intl, Int8Array, Uint8Array, Uint16Array, Int16Array, Uint32Array, Int32Array,
        Float32Array, Float64Array, Uint8ClampedArray, BigUint64Array, BigInt64Array, FinalizationRegistry, JSON, Map,
        Math, Number, Object, Promise, Proxy, Reflect, RegExp, Set, String, Symbol, WeakMap, WeakRef, WeakSet
    ]) {
        Object.freeze(x);
        if ("prototype" in x)
            Object.freeze(x.prototype);
    }
    Object.freeze(Function);
    for (const p of ["apply", "bind", "call"])
        Object.defineProperty(Function.prototype, p, { configurable: false, writable: false });
    for (const p of ["globalThis", "global", "Infinity", "NaN", "undefined", "eval", "isFinite", "isNaN", "parseFloat", "parseInt", ...transform_1.SPECIALS, "$log"])
        Object.defineProperty(g, p, { configurable: false, writable: false });
    Object.freeze(module_1.default);
    Object.freeze(module_1.default.prototype);
    Object.freeze(process);
    Object.freeze(Object.getPrototypeOf(module));
}
exports.patchGlobalBuiltins = patchGlobalBuiltins;
//# sourceMappingURL=sandbox.js.map